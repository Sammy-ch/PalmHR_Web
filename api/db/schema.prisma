// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  previewFeatures = ["driverAdapters"]
}

model Admin {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String
  last_name  String
  email      String
  admin_role AdminRole[]

  @@unique([id, email])
}

model AdminRole {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId String? @db.Uuid
  role    String
  admin   Admin?  @relation(fields: [adminId], references: [id])

  @@unique([id, role, adminId])
}

model EmployeeProfile {
  profile_id           String                     @id @db.Uuid
  first_name           String
  last_name            String
  profile_image        String?
  position             String
  email                String?
  allowed_leaves       Int?
  AttendanceData       EmployeeAttendance[]
  LeaveData            EmployeeLeaveForm[]
  CheckingRequestsData CheckingRequestQueue[]
  PayrollData          EmployeePayRoll[]
  AttendanceReport     EmployeeAttendanceReport[]
}

model EmployeeAttendance {
  attendance_id  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee       EmployeeProfile @relation(fields: [employee_id], references: [profile_id])
  employee_id    String          @db.Uuid
  checkin_time   DateTime?       @db.Time()
  checkout_time  DateTime?       @db.Time()
  checking_date  DateTime?       @db.Date
  working_time   DateTime?       @db.Time()
  attendance_tag AttendanceTag
}

model CheckingRequestQueue {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee        EmployeeProfile @relation(fields: [employee_id], references: [profile_id])
  employee_id     String          @db.Uuid
  checking_date   DateTime        @db.Date
  checking_time   DateTime        @db.Time()
  checking_type   CheckingType
  checking_status CheckingStatus
}

model EmployeePayRoll {
  id               String          @id @db.Uuid
  employee         EmployeeProfile @relation(fields: [id], references: [profile_id])
  pay_period_start DateTime        @db.Date
  pay_period_end   DateTime        @db.Date
  hours_Worked     DateTime        @db.Time()
  base_salary      Int             @db.Integer
  overtime         DateTime?       @db.Time()
  netpay           Int?            @db.Integer

  @@unique([id])
}

model EmployeeLeaveForm {
  id                   String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requested_leave_date DateTime        @db.Date
  leave                EmployeeProfile @relation(fields: [leave_id], references: [profile_id])
  leave_id             String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leave_type           LeaveType
  leave_days           Int             @db.Integer
  leave_approval       Boolean?        @db.Boolean
}

model EmployeeAttendanceReport {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee           EmployeeProfile @relation(fields: [employee_id], references: [profile_id])
  employee_id        String          @db.Uuid
  TotalOvertime      DateTime        @db.Time()
  TotalWorkhours     DateTime        @db.Time()
  TotalSickLeaves    DateTime        @db.Time()
  AbstenteeismRate   Int             @db.Integer
  EarlyAttendaceRate Int             @db.Integer
  LateAttedanceRate  Int             @db.Integer
}

model Organization {
  OrganizationId   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  OrganizationName String @db.Text
  Address          String @db.Text
  Email            String @db.Text
  Phone            String @db.Text

  @@unique([OrganizationId, OrganizationName, Email])
}

enum AttendanceTag {
  PRESENT
  ABSENT
}

enum CheckingType {
  CHECKIN
  CHECKOUT
}

enum CheckingStatus {
  APPROVED
  PENDING
  DECLINED
}

enum LeaveType {
  PERSONAL
  SICK
  HOLIDAY
}
