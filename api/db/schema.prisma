// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator kysely {
  provider      = "prisma-kysely"
  output        = "../src/db"
  fileName      = "types.ts"
  enumFileName  = "enums.ts"
  binaryTargets = "native"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Admin {
  id           String         @id @db.Text
  org_id       String         @db.Text
  fullName     String         @default("")
  email        String
  imageUrl     String?
  admin_role   AdminRole[]
  organization Organization[]

  @@unique([id, email, org_id])
}

model AdminRole {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId String? @db.Text
  role    String
  admin   Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([id, role, adminId])
}

model EmployeeProfile {
  profile_id           String                 @id @db.Uuid
  org_id               String                 @db.Text
  Organization         Organization           @relation(fields: [org_id], references: [OrganizationId], onDelete: Cascade)
  first_name           String
  last_name            String
  profile_image        String?
  position             String
  email                String?
  allowed_leaves       Int?
  AttendanceData       EmployeeAttendance[]
  LeaveData            EmployeeLeaveForm[]
  CheckingRequestsData CheckingRequestQueue[]
  PayrollData          EmployeePayRoll[]
}

model EmployeeAttendance {
  attendance_id  String          @id @db.Uuid
  employee       EmployeeProfile @relation(fields: [employee_id], references: [profile_id])
  employee_id    String          @db.Uuid
  checkin_time   DateTime?       @db.Time()
  checkout_time  DateTime?       @db.Time()
  checking_date  DateTime?       @db.Date
  working_time   DateTime?       @db.Time()
  overtime       DateTime?       @db.Time()
  attendance_tag AttendanceTag
}

model CheckingRequestQueue {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee        EmployeeProfile @relation(fields: [employee_id], references: [profile_id])
  employee_id     String          @db.Uuid
  checking_date   DateTime        @db.Date
  checking_time   DateTime        @db.Time()
  checking_type   CheckingType
  checking_status CheckingStatus
}

model EmployeePayRoll {
  id               String          @id @db.Uuid
  employee         EmployeeProfile @relation(fields: [id], references: [profile_id])
  pay_period_start DateTime        @db.Date
  pay_period_end   DateTime        @db.Date
  base_salary      Int             @db.Integer
  net_salary       Int?            @db.Integer
  gross_salary     Int?            @db.Integer
  bonuses          Int?            @db.Integer
  labor_cost       Int?            @db.Integer
  IPR              Int?            @db.Integer

  @@unique([id])
}

model PayrollSetting {
  id                String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id            String       @db.Text
  organization      Organization @relation(fields: [org_id], references: [OrganizationId], onDelete: Cascade)
  housing           Int?         @db.Integer
  transportation    Int?         @db.Integer
  INSS              Int?         @db.Integer
  INSS_patronal     Int?         @db.Integer
  INSS_risque       Int?         @db.Integer
  medical_insurance Int?         @db.Integer
}

model EmployeeLeaveForm {
  id                   String          @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requested_leave_date DateTime        @db.Date
  leave                EmployeeProfile @relation(fields: [leave_id], references: [profile_id])
  leave_id             String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leave_type           LeaveType
  leave_start          DateTime        @db.Date
  leave_end            DateTime        @db.Date
  leave_days           Int?            @db.Integer
  leave_status         LeaveStatus
}

model Organization {
  OrganizationId   String            @id @db.Text
  OrganizationName String            @db.Text
  organizationType OrganizationType
  addressStreet    String            @db.Text
  addressCity      String            @db.Text
  addressState     String            @db.Text
  addressCountry   String            @db.Text
  Email            String            @db.Text
  websiteUrl       String            @db.Text
  Phone            String            @db.Text
  isVerified       Boolean           @default(false) @db.Boolean
  organizationSize OrganizationSize
  Industry         Industry
  PayrollSettings  PayrollSetting[]
  EmployeeProfiles EmployeeProfile[]
  Admin            Admin?            @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId          String?           @db.Text

  @@unique([OrganizationId, OrganizationName, Email])
}

enum AttendanceTag {
  PRESENT
  ABSENT
}

enum CheckingType {
  CHECKIN
  CHECKOUT
}

enum CheckingStatus {
  APPROVED
  PENDING
  DECLINED
}

enum LeaveType {
  PERSONAL
  SICK
  HOLIDAY
}

enum LeaveStatus {
  APPROVED
  PENDING
  DENIED
}

enum OrganizationSize {
  Small
  Medium
  Large
}

enum Industry {
  Technology
  HealthCare
  Finance
  Education
  Retail
  Manufactoring
  Other
}

enum OrganizationType {
  NonProfit
  ForProfit
  Government
  Other
}
