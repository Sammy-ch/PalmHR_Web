// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  previewFeatures = ["driverAdapters"]
}

model Admin {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id       String       @db.Uuid
  Organization Organization @relation(fields: [org_id], references: [OrganizationId])
  first_name   String
  last_name    String
  email        String
  admin_role   AdminRole[]

  @@unique([id, email])
}

model AdminRole {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId String? @db.Uuid
  role    String
  admin   Admin?  @relation(fields: [adminId], references: [id])

  @@unique([id, role, adminId])
}

model EmployeeProfile {
  profile_id           String                     @id @db.Uuid
  org_id               String                     @db.Uuid
  Organization         Organization               @relation(fields: [org_id], references: [OrganizationId])
  first_name           String
  last_name            String
  profile_image        String?
  position             String
  email                String?
  allowed_leaves       Int?
  AttendanceData       EmployeeAttendance[]
  LeaveData            EmployeeLeaveForm[]
  CheckingRequestsData CheckingRequestQueue[]
  PayrollData          EmployeePayRoll[]
  AttendanceReport     EmployeeAttendanceReport[]
}

model EmployeeAttendance {
  attendance_id  String          @id @db.Uuid
  employee       EmployeeProfile @relation(fields: [employee_id], references: [profile_id])
  employee_id    String          @db.Uuid
  checkin_time   DateTime?       @db.Time()
  checkout_time  DateTime?       @db.Time()
  checking_date  DateTime?       @db.Date
  working_time   DateTime?       @db.Time()
  attendance_tag AttendanceTag
}

model CheckingRequestQueue {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee        EmployeeProfile @relation(fields: [employee_id], references: [profile_id])
  employee_id     String          @db.Uuid
  checking_date   DateTime        @db.Date
  checking_time   DateTime        @db.Time()
  checking_type   CheckingType
  checking_status CheckingStatus
}

model EmployeePayRoll {
  id                String                   @id @db.Uuid
  employee          EmployeeProfile          @relation(fields: [id], references: [profile_id])
  pay_period_start  DateTime                 @db.Date
  pay_period_end    DateTime                 @db.Date
  attendance_report String                   @db.Uuid
  report            EmployeeAttendanceReport @relation(fields: [attendance_report], references: [employee_id])
  base_salary       Int                      @db.Integer
  overtime          Int?                     @db.Integer
  net_salary        Int?                     @db.Integer
  bonuses           Int?                     @db.Integer
  gross_amount      Int?                     @db.Integer
  labor_cost        Int?                     @db.Integer

  @@unique([id])
}

model PayrollData {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org_id             String       @db.Uuid
  organization       Organization @relation(fields: [org_id], references: [OrganizationId])
  housing            Int?         @db.Integer
  transport          Int?         @db.Integer
  INSS               Int?         @db.Integer
  INSS_contribution  Int?         @db.Integer
  INSS_payroll_risks Int?         @db.Integer
  medical_insurance  Int?         @db.Integer
  IPR                Int?         @db.Integer
  userId             String?      @db.Uuid
}

model EmployeeLeaveForm {
  id                   String          @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  requested_leave_date DateTime        @db.Date
  leave                EmployeeProfile @relation(fields: [leave_id], references: [profile_id])
  leave_id             String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leave_type           LeaveType
  leave_days           Int             @db.Integer
  leave_approval       Boolean?        @db.Boolean
}

model EmployeeAttendanceReport {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee           EmployeeProfile   @relation(fields: [employee_id], references: [profile_id])
  employee_id        String            @unique @db.Uuid
  TotalOvertime      Int               @db.Integer
  TotalWorkhours     Int               @db.Integer
  TotalSickLeaves    Int               @db.Integer
  AbstenteeismRate   Int               @db.Integer
  EarlyAttendaceRate Int               @db.Integer
  LateAttedanceRate  Int               @db.Integer
  payrollData        EmployeePayRoll[]
}

model Organization {
  OrganizationId            String                      @id @db.Uuid
  OrganizationName          String                      @db.Text
  organizationType          OrganizationType
  addressStreet             String                      @db.Text
  addressCity               String                      @db.Text
  addressState              String                      @db.Text
  addressCountry            String                      @db.Text
  Email                     String                      @db.Text
  websiteUrl                String                      @db.Text
  Phone                     String                      @db.Text
  isVerified                Boolean                     @default(false) @db.Boolean
  organizationSize          OrganizationSize
  Industry                  Industry
  PayrollData            PayrollData[]
  Admin                     Admin[]
  EmployeeProfiles          EmployeeProfile[]
  OrganizationAttendanceKpi OrganizationAttendanceKpi[]

  @@unique([OrganizationId, OrganizationName, Email])
}

model OrganizationAttendanceKpi {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  TotalOvertime      Int          @db.Integer
  TotalWorkhours     Int          @db.Integer
  TotalSickLeaves    Int          @db.Integer
  AbstenteeismRate   Int          @db.Integer
  EarlyAttendaceRate Int          @db.Integer
  LateAttedanceRate  Int          @db.Integer
  org_id             String       @db.Uuid
  Organization       Organization @relation(fields: [org_id], references: [OrganizationId])
}

enum AttendanceTag {
  PRESENT
  ABSENT
}

enum CheckingType {
  CHECKIN
  CHECKOUT
}

enum CheckingStatus {
  APPROVED
  PENDING
  DECLINED
}

enum LeaveType {
  PERSONAL
  SICK
  HOLIDAY
}

enum OrganizationSize {
  Small
  Medium
  Large
}

enum Industry {
  Technology
  HealthCare
  Finance
  Education
  Retail
  Manufactoring
  Other
}

enum OrganizationType {
  NonProfit
  ForProfit
  Government
  Other
}
